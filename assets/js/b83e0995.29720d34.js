(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[4409],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},5064:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var r=n(7294),i=n(9443);var a=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(6010),l="tabItem_1uMI",s="tabItemActive_2DSg";var u=function(e){var t,n=e.lazy,i=e.block,u=e.defaultValue,c=e.values,p=e.groupId,m=e.className,d=r.Children.toArray(e.children),f=null!=c?c:d.map((function(e){return{value:e.props.value,label:e.props.label}})),g=null!=u?u:null==(t=d.find((function(e){return e.props.default})))?void 0:t.props.value,h=a(),b=h.tabGroupChoices,k=h.setTabGroupChoices,v=(0,r.useState)(g),w=v[0],y=v[1],N=[];if(null!=p){var E=b[p];null!=E&&E!==w&&f.some((function(e){return e.value===E}))&&y(E)}var O=function(e){var t=e.currentTarget,n=N.indexOf(t),r=f[n].value;y(r),null!=p&&(k(p,r),setTimeout((function(){var e,n,r,i,a,o,l,u;(e=t.getBoundingClientRect(),n=e.top,r=e.left,i=e.bottom,a=e.right,o=window,l=o.innerHeight,u=o.innerWidth,n>=0&&a<=u&&i<=l&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},x=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=N.indexOf(e.target)+1;n=N[r]||N[0];break;case"ArrowLeft":var i=N.indexOf(e.target)-1;n=N[i]||N[N.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},m)},f.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":w===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:x,onFocus:O,onClick:O},null!=n?n:t)}))),n?(0,r.cloneElement)(d.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},d.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}},9443:function(e,t,n){"use strict";var r=(0,n(7294).createContext)(void 0);t.Z=r},1570:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=(n(5064),n(8215),{id:"desktop-feature-api-testing",title:"Desktop Feature API testing",slug:"/desktop-feature-api-testing"}),l=void 0,s={unversionedId:"workflow/desktop-feature-api-testing",id:"workflow/desktop-feature-api-testing",isDocsHomePage:!1,title:"Desktop Feature API testing",description:"In order to make testing easier we created some helpers that can be accessed by including",source:"@site/docs/workflow/desktop-feature-api-testing.mdx",sourceDirName:"workflow",slug:"/desktop-feature-api-testing",permalink:"/desktop-feature-api-testing",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/workflow/desktop-feature-api-testing.mdx",tags:[],version:"current",frontMatter:{id:"desktop-feature-api-testing",title:"Desktop Feature API testing",slug:"/desktop-feature-api-testing"},sidebar:"sidebar",previous:{title:"Testing on mobile",permalink:"/workflow/android-frontend-testing"},next:{title:"Launching",permalink:"/launching"}},u=[{value:"Testing your feature integrating with Nimbus",id:"testing-your-feature-integrating-with-nimbus",children:[]},{value:"Testing with a live Nimbus recipe",id:"testing-with-a-live-nimbus-recipe",children:[]},{value:"Testing with Desktop Rollouts",id:"testing-with-desktop-rollouts",children:[]},{value:"Testing with gTest",id:"testing-with-gtest",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to make testing easier we created some helpers that can be accessed by including"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { ExperimentFakes } = ChromeUtils.import(\n  "resource://testing-common/NimbusTestUtils.jsm",\n);\n')),(0,a.kt)("h2",{id:"testing-your-feature-integrating-with-nimbus"},"Testing your feature integrating with Nimbus"),(0,a.kt)("p",null,"You need to provide a feature configuration and await enrollment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let doExperimentCleanup = await ExperimentFakes.enrollWithFeatureConfig({\n  featureId: "<YOUR FEATURE>",\n  // You can add values for each variable you added to the manifest\n  value: {\n    enabled: true,\n  },\n});\n\n// Now you can assume the feature is enabled so you can\n// test and that it\'s doing the right thing\n\n// Assert.ok(It works!)\n\n// Finishing up\nawait doExperimentCleanup();\n')),(0,a.kt)("h2",{id:"testing-with-a-live-nimbus-recipe"},"Testing with a live Nimbus recipe"),(0,a.kt)("p",null,"If you already published an experiment through Nimbus then you will want to test enrollment in the browser."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Flip the following pref to true in the browser you want to enroll (in about:config)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"nimbus.debug")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"You need to copy paste the following URL and fill in the required details.")),(0,a.kt)("p",null,"For experiments that are already live:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"about:studies?optin_slug=<YOUR_EXPERIMENT_SLUG>&optin_branch=<BRANCH_SLUG_TO_ENROLL>")),(0,a.kt)("p",null,'For experiments that are in "preview" mode:'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"about:studies?optin_slug=<YOUR_EXPERIMENT_SLUG>&optin_branch=<BRANCH_SLUG_TO_ENROLL>&optin_collection=nimbus-preview")),(0,a.kt)("h2",{id:"testing-with-desktop-rollouts"},"Testing with Desktop Rollouts"),(0,a.kt)("p",null,"For writing tests you usually want to have the following modules imported:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { ExperimentAPI, NimbusFeatures } = ChromeUtils.import(\n  "resource://nimbus/ExperimentAPI.jsm",\n);\nconst { ExperimentFakes } = ChromeUtils.import(\n  "resource://testing-common/NimbusTestUtils.jsm",\n);\n')),(0,a.kt)("p",null,"Next this is how you would set up your feature to test integration with Desktop Rollouts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Ensure everything has finished initializing\nawait ExperimentAPI.ready();\n// The actual setup\nconst doCleanup = await ExperimentFakes.enrollWithRollout({\n  // Reference your feature id already defined in the FeatureManifest.yaml\n  featureId: "<YOUR FEATURE ID>",\n  value: {\n    variables: { enabled: true },\n  },\n});\n\n// Now your feature integration is ready for testing\n\n// NimbusFeature.<YOUR FEATURE>.getVariable("enabled")\n// NimbusFeature.<YOUR FEATURE>.getAllVariables()\n\nawait doCleanup(); // to remove the rollout\n')),(0,a.kt)("h2",{id:"testing-with-gtest"},"Testing with gTest"),(0,a.kt)("p",null,"Otherwise for a ",(0,a.kt)("inlineCode",{parentName:"p"},"gTest")," or other requirements you can set a pref ",(0,a.kt)("inlineCode",{parentName:"p"},"nimbus.syncdatastore.<feature name>.<variable name>")," with the appropriate type you defined in the FeatureManifest."),(0,a.kt)("p",null,"\u26a0\ufe0f This variable naming convention is an implementation detail and might change in the future."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "mozilla/browser/NimbusFeatures.h"\n\n# Set a preference as described above based on what you want the test to do\n\n// GetInt will return the appropriate value you set\nNimbusFeatures::GetInt("aboutwelcome"_ns, "skipFocus"_ns, false);\n\n// On update will call your callback function when the pref value changes\nNimbusFeatures::OnUpdate("aboutwelcome"_ns, "skipFocus"_ns,\n  [](const char*, void*){}, void*);\n')),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Examples of platform consumers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://phabricator.services.mozilla.com/D121112"},"Bug 1719070 - UA: Add support for a Nimbus experiment to override Firefox's User-Agent string."))))}p.isMDXComponent=!0},6010:function(e,t,n){"use strict";function r(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:function(){return i}})}}]);