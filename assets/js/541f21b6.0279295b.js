"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[8427],{4137:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return t?a.createElement(f,o(o({ref:n},m),{},{components:t})):a.createElement(f,o({ref:n},m))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=t(7462),i=(t(7294),t(4137));const l={id:"fml-imports",title:"Componentizing the Nimbus Feature Manifest",slug:"/fml/fml-imports-and-includes",sidebar_position:3},o=void 0,r={unversionedId:"deep-dives/specifications/fml/fml-imports",id:"deep-dives/specifications/fml/fml-imports",title:"Componentizing the Nimbus Feature Manifest",description:"In the first iteration of the nimbus-fml, the tooling was only able to work on one file at a time.",source:"@site/docs/deep-dives/specifications/fml/fml-imports.mdx",sourceDirName:"deep-dives/specifications/fml",slug:"/fml/fml-imports-and-includes",permalink:"/fml/fml-imports-and-includes",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/specifications/fml/fml-imports.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"fml-imports",title:"Componentizing the Nimbus Feature Manifest",slug:"/fml/fml-imports-and-includes",sidebar_position:3},sidebar:"sidebar",previous:{title:"Using paths in FML",permalink:"/fml/fml-paths"},next:{title:"Nimbus FML command line interface",permalink:"/fml/fml-cli"}},s={},p=[{value:"Goals",id:"goals",level:2},{value:"Non-goals",id:"non-goals",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Invoking the <code>nimbus-fml</code> command",id:"invoking-the-nimbus-fml-command",level:3},{value:"The <code>about</code> block",id:"the-about-block",level:3},{value:"The <code>include</code> list",id:"the-include-list",level:3},{value:"The <code>import</code> list",id:"the-import-list",level:3},{value:"Implementation notes",id:"implementation-notes",level:2},{value:"Illustrative sketch",id:"illustrative-sketch",level:3},{value:"Two FML files",id:"two-fml-files",level:4},{value:"The corresponding Kotlin files",id:"the-corresponding-kotlin-files",level:4}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=m("Tabs"),c=m("TabItem"),d={toc:p},f="wrapper";function h(e){let{components:n,...t}=e;return(0,i.kt)(f,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the first iteration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-fml"),", the tooling was only able to work on one file at a time."),(0,i.kt)("p",null,"It accepted a ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus.fml.yaml")," file, and outputed a Kotlin or Swift file for inclusion in the product, or an ",(0,i.kt)("inlineCode",{parentName:"p"},".experimenter.yaml")," file for ingestion into Experimenter."),(0,i.kt)("p",null,"The pattern we have seen is that the application specifies code that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grows each time a new feature is added. This makes it hard to navigate."),(0,i.kt)("li",{parentName:"ul"},"is only able to generate code app code, which is not usable in any of the app's components.")),(0,i.kt)("p",null,"This second restriction is most problematic: the app's components (e.g. Fenix is made up of Android Components, Application Services, GeckoView and Gecko) are unable to instrument their code for experimentation, even though they by themselves might make up the majority of the codebase of the app."),(0,i.kt)("p",null,"This document discusses three new blocks in the FML specification, which are to implement including and importing FML files which easily solve these problems."),(0,i.kt)("p",null,"It allows for experimentation in the re-usable and library codebases that makes up most of our applications."),(0,i.kt)("p",null,"It enables cross-platform re-use of data definitions and schemas which will in turn, make it easier to reason about experimental features by experiment owners."),(0,i.kt)("h2",{id:"goals"},"Goals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"nimbus.fml.yaml")," file should be composable such the monolithic file can be broken up in to smaller pieces, potentially to live closer to the code it's configuring."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},".experimenter.yaml")," ingested by Experimenter should give a complete picture of all the features available in the application."),(0,i.kt)("li",{parentName:"ul"},"The components (and their ",(0,i.kt)("inlineCode",{parentName:"li"},"fml.yaml")," files) can live in a different repository to the application."),(0,i.kt)("li",{parentName:"ul"},"The components' feature code generation happens at component compile time"),(0,i.kt)("li",{parentName:"ul"},"Generated feature code should be visible and configurable from the application",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g. Fenix and Focus might use the same feature from Android Components, but require different configuration."))),(0,i.kt)("li",{parentName:"ul"},"versioning and branches:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"experiments are launched at a population of users using different versions of the app."),(0,i.kt)("li",{parentName:"ul"},"each specific version of the app is potentially built with a specific version of their components"),(0,i.kt)("li",{parentName:"ul"},"for this proposal, easily varying the versions of components is not explored."))),(0,i.kt)("li",{parentName:"ul"},"local development",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"for some feature development, working in multiple repos ",(0,i.kt)("em",{parentName:"li"},"at the same time")," is necessary."),(0,i.kt)("li",{parentName:"ul"},"for this proposal, easily varying the paths or URLs of components is not explored, although this will likely involve a config file.")))),(0,i.kt)("h2",{id:"non-goals"},"Non-goals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"namespacing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"currently names of feature, object, and enum classes are unique; collisions are disallowed"),(0,i.kt)("li",{parentName:"ul"},"for this proposal, no attempt is made to allow classes of the same name to be used."))),(0,i.kt)("li",{parentName:"ul"},"connectors to different languages",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"some features may be written in a different language or context to the one that the application is written in: e.g. C++, Rust or JS, or in an iOS app-extension."),(0,i.kt)("li",{parentName:"ul"},"for this proposal, this is only lightly discussed.")))),(0,i.kt)("h2",{id:"concepts"},"Concepts"),(0,i.kt)("p",null,"This proposal changes the way the ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," file is invoked, and adds three new structures to the Feature Manifest Language spec."),(0,i.kt)("h3",{id:"invoking-the-nimbus-fml-command"},"Invoking the ",(0,i.kt)("inlineCode",{parentName:"h3"},"nimbus-fml")," command"),(0,i.kt)("p",null,"The following ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," commands can be run in fml files in either applications or components."),(0,i.kt)(u,{defaultValue:"kotlin",values:[{label:"Android",value:"kotlin"},{label:"iOS",value:"swift"}],mdxType:"Tabs"},(0,i.kt)(c,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("p",null,"Each component or app has its own ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle"),"."),(0,i.kt)("p",null,"The following command is assembled and run by the Nimbus Gradle Plugin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"% nimbus-fml generate --language kotlin --channel release component.fml.yaml components/build/generated/debug/nimbus\n")),(0,i.kt)("p",null,"This will generated exactly one Kotlin file.")),(0,i.kt)(c,{value:"swift",mdxType:"TabItem"},(0,i.kt)("p",null,"The following command is assembled and run by a Build Phase."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"% nimbus-fml generate --language swift --channel release component.fml.yaml component/Generated\n")),(0,i.kt)("p",null,"This will generated exactly one Swift file."))),(0,i.kt)("p",null,"The following command is assembled and run at application build time only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"% nimbus-fml generate-experimenter application.fml.yaml .experimenter.yaml\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".experimenter.yaml")," file is checked into source control, and ingested by Experimenter."),(0,i.kt)("h3",{id:"the-about-block"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"about")," block"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"about")," block is an optional block in any given ",(0,i.kt)("inlineCode",{parentName:"p"},".fml.yaml")," file."),(0,i.kt)("p",null,"If present:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the file may be used to generate a Swift or Kotlin file."),(0,i.kt)("li",{parentName:"ul"},"the file may be imported by another ",(0,i.kt)("inlineCode",{parentName:"li"},".fml.yaml")," file.")),(0,i.kt)("p",null,"If not present:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the file may be included in another ",(0,i.kt)("inlineCode",{parentName:"li"},".fml.yaml")," file.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"about")," associates a particular ",(0,i.kt)("inlineCode",{parentName:"p"},".fml.yaml")," file what Kotlin/Swift class and package/module this file will generate:"),(0,i.kt)(u,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Swift",value:"swift"}],mdxType:"Tabs"},(0,i.kt)(c,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"about:\n    android:\n        class:   .nimbus.MyNimbus\n        package: mozilla.components.search\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," property ",(0,i.kt)("strong",{parentName:"p"},"must")," correspond to the app's namespace, where the ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildConfig")," files are generated."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," property is the qualified name of the class that will be generated. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," has ",(0,i.kt)("inlineCode",{parentName:"p"},".")," as a prefix, the fully qualified name is created by appending the ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"class"),". The filename is taken to be the final segment of the fully qualified name."),(0,i.kt)("p",null,"For Android developers, this should be the familiar way ",(0,i.kt)("inlineCode",{parentName:"p"},"android:name")," is specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),".")),(0,i.kt)(c,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"about:\n    ios:\n        class:   AccountsNimbus\n        module:  Accounts\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"module")," property is the name of the module the generate class will be in."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," is the name of the class used to access the features."))),(0,i.kt)("p",null,"As with existing ",(0,i.kt)("inlineCode",{parentName:"p"},".fml.yaml")," files, any file with an ",(0,i.kt)("inlineCode",{parentName:"p"},"about")," block, ",(0,i.kt)("strong",{parentName:"p"},"must")," contain a ",(0,i.kt)("inlineCode",{parentName:"p"},"channels")," list. e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"channels:\n    - release\n    - beta\n    - developer\n    - testing\n")),(0,i.kt)("h3",{id:"the-include-list"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"include")," list"),(0,i.kt)("p",null,"This is a list of files which will be merged with this one. The files may be relative to this one, absolute or URLs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"include:\n    - nimbus/search.yaml\n    - @mozilla/nimbus-shared/fml/messaging.yaml\n")),(0,i.kt)("p",null,"Each element in the list is a path or URL to another file to be included into this one."),(0,i.kt)("p",null,"Included files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"must not contain an ",(0,i.kt)("inlineCode",{parentName:"li"},"about")," block,"),(0,i.kt)("li",{parentName:"ul"},"must not contain a ",(0,i.kt)("inlineCode",{parentName:"li"},"channels")," list, or must match the ",(0,i.kt)("inlineCode",{parentName:"li"},"channels")," list of the including file.")),(0,i.kt)("p",null,"Including a file means that contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"features"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"objects")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"enums")," blocks will be appended from the included file to the including file. Any collisions will cause an error, i.e. if two files declare a type of the same name, this should cause an error."),(0,i.kt)("p",null,"Included files may include other files. These files may be remote or on a local filesystem."),(0,i.kt)("p",null,"Including the same file twice should be a no-op."),(0,i.kt)("p",null,"Included files may import files. These files may be remote or on a local filesystem."),(0,i.kt)("h3",{id:"the-import-list"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"import")," list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"import:\n    - path:    ../Accounts/nimbus.fml.yaml\n      channel: production\n    - path:    @mozilla-mobile/ios-components/components/feature/search/nimbus.fml.yaml\n      channel: release\n")),(0,i.kt)("p",null,"The list contains blocks with the following mandatory properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path"),": this string value is a relative path or URL to the imported file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel"),": this string value is the name of a channel. The channel ",(0,i.kt)("strong",{parentName:"li"},"must")," be in the channel list of the included file.")),(0,i.kt)("p",null,"An imported file:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"must")," have an ",(0,i.kt)("inlineCode",{parentName:"li"},"about")," block."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"may")," have an ",(0,i.kt)("inlineCode",{parentName:"li"},"include")," block.")),(0,i.kt)("p",null,"Optionally, a ",(0,i.kt)("inlineCode",{parentName:"p"},"features")," block is provided, which is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Map<FeatureId, List<DefaultBlock>>"),". This provides a way of configuring components."),(0,i.kt)("p",null,"A list of ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultBlock"),"s is the same way feature defaulting, and channel specific defaulting works when specifying a feature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"import:\n    - path:    ../Accounts/nimbus.fml.yaml\n      channel: production\n      features:\n        accounts:\n            - value:\n                button-color: blue\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," used by the imported code will come from the importing code."),(0,i.kt)("h2",{id:"implementation-notes"},"Implementation notes"),(0,i.kt)("h3",{id:"illustrative-sketch"},"Illustrative sketch"),(0,i.kt)("p",null,"Consider two projects that are already linked: the app, and the components. One of the components is a messaging feature which we'd like to be able to use in the app."),(0,i.kt)("p",null,"The app needs to initialize the messaging component with specific configuration, not available to the component when it was compiled."),(0,i.kt)("h4",{id:"two-fml-files"},"Two FML files"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"../components/messaging.fml.yaml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'about:\n    class:   .nimbus.ComponentNimbus\n    package: org.example.components\nchannels:\n    - testing\n    - staging\n    - production\n\nfeatures:\n    messaging:\n        # definition elided, for clarity\n        # We include one variable for illustration\n        variable:\n            triggers:\n                type: Map<String, String>\n        defaults:\n            - channel: production\n              value:\n                triggers:\n                    ALWAYS: "true"\n                    NEVER:  "false"\n')),(0,i.kt)("p",null,"The top level file, ",(0,i.kt)("inlineCode",{parentName:"p"},"app.fml.yaml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"about:\n    class:   .nimbus.AppNimbus\n    package: org.example.app\nchannels:\n    - developer\n    - nightly\n    - beta\n    - release\nimport:\n    - path:    ../components/messaging.fml.yaml\n      channel: production\n      features:\n        messaging:\n            - channel: release\n              value:\n                I_AM_DEFAULT_BROWSER:     is_default_browser == true\n                I_AM_NOT_DEFAULT_BROWSER: is_default_browser != true\n\n")),(0,i.kt)("h4",{id:"the-corresponding-kotlin-files"},"The corresponding Kotlin files"),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"messaging.fml.yaml")," in the components directory, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"channel")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"production")," generates:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package org.example.components.nimbus\n\nimport org.example.components.R\n\nclass ComponentNimbus {\n    var api: NimbusFeaturesInterface?\n\n    \u2026\n}\n\nclass Messaging\n    private constructor(\u2026) {\n    constructor(\n        _variables: Variables = NullVariables.instance,\n        triggers: Map<String, String> = mapOf(\n            "ALWAYS" to "true",\n            "NEVER" to "false"\n        )\n    )\n}\n')),(0,i.kt)("p",null,"When running the ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-fml")," command with the ",(0,i.kt)("inlineCode",{parentName:"p"},"release")," channel, the component file is imported."),(0,i.kt)("p",null,"The generated file looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package org.example.app.nimbus\n\nimport org.example.component.ComponentNimbus\nimport org.example.app.R\n\nclass AppNimbus {\n    var api: NimbusFeaturesInterface? = null\n        set(value) {\n            ComponentNimbus.api = value\n        }\n\n    companion object {\n        init() {\n            ComponentNimbus.features.messaging.withConfiguration { _variables ->\n                Messaging(\n                    _variables,\n                    triggers = mapOf(\n                        "ALWAYS" to "true",\n                        "NEVER" to "false",\n                        "I_AM_DEFAULT_BROWSER" to "is_default_browser == true",\n                        "I_AM_NOT_DEFAULT_BROWSER" to "is_default_browser != true"\n                    )\n                )\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Several places to highlight in this code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The class names and package names are gained from the ",(0,i.kt)("inlineCode",{parentName:"li"},"about")," blocks of the imported files."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," property connects the Nimbus SDK to the generated code. Setting this lets the ",(0,i.kt)("inlineCode",{parentName:"li"},"AppNimbus")," get configuration from the server. The setter now sets the ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," all imported (and generated above) classes\u2014\xa0in this case ",(0,i.kt)("inlineCode",{parentName:"li"},"ComponentNimbus"),"."),(0,i.kt)("li",{parentName:"ul"},"The companion object ",(0,i.kt)("inlineCode",{parentName:"li"},"init")," block calls ",(0,i.kt)("inlineCode",{parentName:"li"},"withConfiguration")," as soon as ",(0,i.kt)("inlineCode",{parentName:"li"},"AppNimbus")," is used. ",(0,i.kt)("inlineCode",{parentName:"li"},"withConfiguration")," is a new method on ",(0,i.kt)("inlineCode",{parentName:"li"},"FeatureHolder")," which provides an alternative ",(0,i.kt)("inlineCode",{parentName:"li"},"create")," closure. It has to be public and is named as to appear after ",(0,i.kt)("inlineCode",{parentName:"li"},"value()")," in the list auto-completed identifiers offered by IDEs. The new configuration comes from merging the component default with the app default.")),(0,i.kt)("p",null,"So when ",(0,i.kt)("inlineCode",{parentName:"p"},"ComponentNimbus.features.messaging.value()")," is called, even from within the component itself, it returns configuration from the Nimbus SDK, and defaults from the app."))}h.isMDXComponent=!0}}]);