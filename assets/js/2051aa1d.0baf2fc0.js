"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[9658],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9236:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(3117),i=(n(7294),n(3905));const o={id:"integration-tests",title:"Integration Test Docs",slug:"/integration-tests"},a="Integration Tests",s={unversionedId:"integration-tests",id:"integration-tests",title:"Integration Test Docs",description:"About",source:"@site/docs/integration-tests.md",sourceDirName:".",slug:"/integration-tests",permalink:"/integration-tests",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/integration-tests.md",tags:[],version:"current",frontMatter:{id:"integration-tests",title:"Integration Test Docs",slug:"/integration-tests"},sidebar:"sidebar",previous:{title:"Glossary",permalink:"/glossary"},next:{title:"Local configuration for natural enrollments",permalink:"/local-enrollment"}},l={},u=[{value:"About",id:"about",level:2},{value:"Nimbus Tests",id:"nimbus-tests",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Legacy tests",id:"legacy-tests",level:2},{value:"Running a single test",id:"running-a-single-test",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration-tests"},"Integration Tests"),(0,i.kt)("h2",{id:"about"},"About"),(0,i.kt)("p",null,"The integration test suite is an end-to-end test suite that uses Selenium and Firefox to verify Nimbus functions properly for users."),(0,i.kt)("h2",{id:"nimbus-tests"},"Nimbus Tests"),(0,i.kt)("h3",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"You must have Docker installed."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a python virtual environment"),(0,i.kt)("li",{parentName:"ol"},"Copy ",(0,i.kt)("inlineCode",{parentName:"li"},".env.integration-tests")," file to ",(0,i.kt)("inlineCode",{parentName:"li"},".env"),"."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"make refresh SKIP_DUMMY=1")," to initialize the DB and setup Nimbus."),(0,i.kt)("li",{parentName:"ol"},"Run the ",(0,i.kt)("inlineCode",{parentName:"li"},"make up_prod_detached")," command."),(0,i.kt)("li",{parentName:"ol"},"Run the following command to run the integration tests: ",(0,i.kt)("inlineCode",{parentName:"li"},"make integration_test_nimbus"))),(0,i.kt)("p",null,"To pass custom parameters to pytest use the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"PYTEST_ARGS"),"."),(0,i.kt)("h2",{id:"legacy-tests"},"Legacy tests"),(0,i.kt)("p",null,"To run the legacy tests follow steps 1-3 above. Then run this command: ",(0,i.kt)("inlineCode",{parentName:"p"},"make integration_test_legacy"),". This will run the legacy experimenter test suite."),(0,i.kt)("h2",{id:"running-a-single-test"},"Running a single test"),(0,i.kt)("p",null,"If you would like to run just 1 test, pass this flag to PYTEST_ARGS with the test name you would like to run: ",(0,i.kt)("inlineCode",{parentName:"p"},"-k"),". Example ",(0,i.kt)("inlineCode",{parentName:"p"},"make integration_test_nimbus PYTEST_ARGS=-ktest_archive_experiment")))}m.isMDXComponent=!0}}]);