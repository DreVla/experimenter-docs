(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[3363],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(o,".").concat(d)]||c[d]||f[d]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5092:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return f}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),s={id:"desktop-pref-experiments",title:"Desktop Pref Experiments",slug:"/desktop-pref-experiments"},l="Running Pref-setting Experiments on Desktop",o={unversionedId:"deep-dives/desktop/desktop-pref-experiments",id:"deep-dives/desktop/desktop-pref-experiments",isDocsHomePage:!1,title:"Desktop Pref Experiments",description:"As of Firefox 107, Nimbus supports experiments that set preferences on Desktop.",source:"@site/docs/deep-dives/desktop/desktop-pref-experiments.md",sourceDirName:"deep-dives/desktop",slug:"/desktop-pref-experiments",permalink:"/desktop-pref-experiments",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/desktop/desktop-pref-experiments.md",tags:[],version:"current",frontMatter:{id:"desktop-pref-experiments",title:"Desktop Pref Experiments",slug:"/desktop-pref-experiments"},sidebar:"sidebar",previous:{title:"Desktop Local Experiment Iteration",permalink:"/desktop-enroll-locally"},next:{title:"Desktop Targeting debug",permalink:"/desktop-targeting-debug"}},p=[{value:"Example Feature",id:"example-feature",children:[]},{value:"Experiments vs Rollouts",id:"experiments-vs-rollouts",children:[]},{value:"Pref branches",id:"pref-branches",children:[]},{value:"User Preference Changes",id:"user-preference-changes",children:[]},{value:"Manifest Changes",id:"manifest-changes",children:[]},{value:"Restrictions with Fallback Prefs",id:"restrictions-with-fallback-prefs",children:[]}],u={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"running-pref-setting-experiments-on-desktop"},"Running Pref-setting Experiments on Desktop"),(0,i.kt)("p",null,"As of Firefox 107, Nimbus supports experiments that set preferences on Desktop.\nUnlike Normandy, Nimbus cannot set arbitrary preferences; instead, the\npreferences that may be set are determined by the feature manifest."),(0,i.kt)("p",null,"Each variable in a Nimbus feature can set a single pref. Integer, string, and\nboolean typed variables are supported but JSON variables are not supported. If\nyou want to set a JSON value to a pref, a string variable should be used and\nexperiments should set the value to a JSON string."),(0,i.kt)("h2",{id:"example-feature"},"Example Feature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pref-feature:\n  description: A description of my feature\n  owner: whoami@mozilla.com\n  variables:\n    string:\n      description: A variable setting a string pref.\n      type: string\n      setPref: test.string\n    int:\n      description: A variable setting an integer pref.\n      type: int\n      setPref: test.int\n    boolean:\n      description: A variable setting a boolean pref.\n      type: boolean\n      setPref: test.boolean\n")),(0,i.kt)("h2",{id:"experiments-vs-rollouts"},"Experiments vs Rollouts"),(0,i.kt)("p",null,"Users can be enrolled in an experiment and rollout for the same feature. If both\nan experiment and rollout set a variable that sets a pref, then the experiment\nwill take precedence. If the user unenrolls from the experiment, then the pref\nwill be set to the value specified in the rollout."),(0,i.kt)("p",null,"When the user is no longer enrolled in either an experiment or a rollout setting\na given pref, then it will be reset to its original value at the time of the\nfirst enrollment, with some caveats:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the pref is set on the default branch (see ",(0,i.kt)("a",{parentName:"li",href:"#pref-branches"},"below"),") and the\npref was not set before enrollment, then the pref will not change until the\nnext restart. This is due to a technical limitation: default branch values\ncannot be cleared."),(0,i.kt)("li",{parentName:"ul"},"If the pref is set on the user branch and the pref was not set before\nenrollment, then the pref will be cleared and will be no longer available.")),(0,i.kt)("h2",{id:"pref-branches"},"Pref branches"),(0,i.kt)("p",null,"By default, values will be set on the default branch. The default branch is not\npersisted, so prefs set on the default branch will not be available until Nimbus\ncompletes its startup and loads all its active experiments from disk."),(0,i.kt)("p",null,"If the feature setting the pref specifies ",(0,i.kt)("inlineCode",{parentName:"p"},"isEarlyStartup: true"),", then the\nvalues will be written to the user branch so that they persisted and available\nduring early startup on the user branch."),(0,i.kt)("h2",{id:"user-preference-changes"},"User Preference Changes"),(0,i.kt)("p",null,"If a user is enrolled in an experiment or rollout that sets a pref and that pref\nchanges, the user will be unenrolled from the experiment (or rollout). This\nincludes both changes made by the user and changes in code. Experiment runners\nshould be careful to ensure there is no code in tree that will modify prefs they\nare experimenting on, otherwise their populations may get spuriously unenrolled."),(0,i.kt)("p",null,"The new value of the preference will be persisted."),(0,i.kt)("h2",{id:"manifest-changes"},"Manifest Changes"),(0,i.kt)("p",null,"Some changes to the feature manifest may result in unenrollment from an active\nexperiment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The feature being removed."),(0,i.kt)("li",{parentName:"ul"},"A variable that is currently setting a pref is removed."),(0,i.kt)("li",{parentName:"ul"},"A variable that is currently setting a pref either changes the pref it is\nsetting or no longer sets a pref (i.e., its ",(0,i.kt)("inlineCode",{parentName:"li"},"setPref")," value changes or is\nremoved).")),(0,i.kt)("p",null,"It should be noted that unenrollment for these reasons will only occur when the\nuser is enrolled in a pref-setting experiment. If a feature specifies both\npref-setting and non-pref setting variables, then changes to the manifest will\nnot result in unenrollment if the active experiment does not have any values for\npref-setting variables."),(0,i.kt)("h2",{id:"restrictions-with-fallback-prefs"},"Restrictions with Fallback Prefs"),(0,i.kt)("p",null,"Variables may not specify both a ",(0,i.kt)("inlineCode",{parentName:"p"},"fallbackPref")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"setPref"),"."),(0,i.kt)("p",null,"Fallback prefs and set prefs are mutually exclusive. That is, If any variable in\nany feature specifies a pref as a fallback pref, no variable may set that\nvariable as a set pref and vice versa."),(0,i.kt)("p",null,"These restrictions are enforced at build time."))}f.isMDXComponent=!0}}]);