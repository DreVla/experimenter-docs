(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[2996],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return f}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=i,d=u["".concat(s,".").concat(f)]||u[f]||p[f]||r;return t?a.createElement(d,o(o({ref:n},m),{},{components:t})):a.createElement(d,o({ref:n},m))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6378:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=t(2122),i=t(9756),r=(t(7294),t(3905)),o={id:"nimbus-cli-working-with-fml",title:"Working with Feature Manifests",slug:"/nimbus-cli/fml"},l=void 0,s={unversionedId:"deep-dives/mobile/nimbus-cli/nimbus-cli-working-with-fml",id:"deep-dives/mobile/nimbus-cli/nimbus-cli-working-with-fml",isDocsHomePage:!1,title:"Working with Feature Manifests",description:"The Feature Manifest Language is a powerful way of specify the shape of the feature configurations that each branch is made up of.",source:"@site/docs/deep-dives/mobile/nimbus-cli/70-working-with-manifests.mdx",sourceDirName:"deep-dives/mobile/nimbus-cli",slug:"/nimbus-cli/fml",permalink:"/nimbus-cli/fml",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/mobile/nimbus-cli/70-working-with-manifests.mdx",tags:[],version:"current",sidebarPosition:70,frontMatter:{id:"nimbus-cli-working-with-fml",title:"Working with Feature Manifests",slug:"/nimbus-cli/fml"},sidebar:"sidebar",previous:{title:"Working with Logs",permalink:"/nimbus-cli/working-with-logs"},next:{title:"Using Environment variables",permalink:"/nimbus-cli/environment-variables"}},c=[{value:"<code>validate</code>",id:"validate",children:[]},{value:"Other commands",id:"other-commands",children:[{value:"<code>enroll</code>",id:"enroll",children:[]}]}],m={toc:c};function p(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Feature Manifest Language is a powerful way of specify the shape of the feature configurations that each branch is made up of."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," knows about the feature manifests for each of the apps, and can validate experiments before they launch."),(0,r.kt)("h2",{id:"validate"},(0,r.kt)("inlineCode",{parentName:"h2"},"validate")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release validate ios-sync-manager-integration\n")),(0,r.kt)("p",null,"This downloads the feature manifest (the fml file), and checks each of the features in each of the branches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\u2705 Loaded manifest from https://raw.githubusercontent.com/mozilla-mobile/firefox-ios/main/nimbus.fml.yaml\n\u2705 control           rust-sync-manager-component\n\u2705 rust-sync-manager rust-sync-manager-component\n")),(0,r.kt)("p",null,"By default, this will download the version from ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", however you can specify a version of the FML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release validate preview/release-ios-re-engagement-notifications-ab-experiment-114 --version 114\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--version")," parameter, we can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"114")," which for ",(0,r.kt)("inlineCode",{parentName:"p"},"firefox_ios"),", this currently translates to the ",(0,r.kt)("inlineCode",{parentName:"p"},"release/v114")," tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\u2705 Loaded manifest from https://raw.githubusercontent.com/mozilla-mobile/firefox-ios/release/v114/nimbus.fml.yaml\n\u2705 control         messaging\n\u2705 treatment-a     messaging\n\u2705 treatment-b     messaging\n\u2705 treatment-c     messaging\n")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--ref")," parameter, we can a tag, a different branch or a commit hash."),(0,r.kt)("p",null,"Alternatively, we can specify a local manifest file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release validate preview/release-ios-re-engagement-notifications-ab-experiment-114 --manifest ./my-manifest.fml.yaml\n")),(0,r.kt)("h2",{id:"other-commands"},"Other commands"),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"enroll")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"test-feature")," validates the experiments before sending them to the device."),(0,r.kt)("p",null,"This can be overridden with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-validate")," option."),(0,r.kt)("h3",{id:"enroll"},(0,r.kt)("inlineCode",{parentName:"h3"},"enroll")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release enroll ios-sync-manager-integration --branch rust-sync-manager\n")),(0,r.kt)("p",null,"The manifest itself is validated on load, so if there is a problem with that feature, you can skip validation with ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-validate"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer enroll ios-set-to-default-in-onboarding-final --branch control --no-validate\n")),(0,r.kt)("p",null,"Each of the ",(0,r.kt)("inlineCode",{parentName:"p"},"--manifest"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--version")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--ref")," options work with ",(0,r.kt)("inlineCode",{parentName:"p"},"enroll")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"test-feature"),"."))}p.isMDXComponent=!0}}]);