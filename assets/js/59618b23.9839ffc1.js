(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[6321],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),f=i,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2040:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a={id:"nimbus-cli-test-feature",title:"Testing Features",slug:"/nimbus-cli/test-feature"},s=void 0,l={unversionedId:"deep-dives/mobile/nimbus-cli/nimbus-cli-test-feature",id:"deep-dives/mobile/nimbus-cli/nimbus-cli-test-feature",isDocsHomePage:!1,title:"Testing Features",description:"The nimbus-cli provides features to download experiments from Remote Settings. However, sometimes you wish to do some exploratory testing of a feature without going through the experimenter interface.",source:"@site/docs/deep-dives/mobile/nimbus-cli/40-testing-features.mdx",sourceDirName:"deep-dives/mobile/nimbus-cli",slug:"/nimbus-cli/test-feature",permalink:"/nimbus-cli/test-feature",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/mobile/nimbus-cli/40-testing-features.mdx",tags:[],version:"current",sidebarPosition:40,frontMatter:{id:"nimbus-cli-test-feature",title:"Testing Features",slug:"/nimbus-cli/test-feature"},sidebar:"sidebar",previous:{title:"Opening and resetting the app",permalink:"/nimbus-cli/opening-and-resetting"},next:{title:"Working with Files",permalink:"/nimbus-cli/working-with-files"}},u=[{value:"<code>test-feature</code>",id:"test-feature",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," provides features to download experiments from Remote Settings. However, sometimes you wish to do some exploratory testing of a feature without going through the experimenter interface."),(0,o.kt)("h2",{id:"test-feature"},(0,o.kt)("inlineCode",{parentName:"h2"},"test-feature")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"test-feature")," command allows you to specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"feature-id")," and one or more JSON files that correspond to the feature configuration for that feature: i.e. to exercise a feature."),(0,o.kt)("p",null,"e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer test-feature messaging my-treatment.json my-control.json\n")),(0,o.kt)("p",null,"For the above ",(0,o.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," will generate an experiment which will enroll in to the given app and channel for the ",(0,o.kt)("inlineCode",{parentName:"p"},"messaging"),", with two branches: ",(0,o.kt)("inlineCode",{parentName:"p"},"my-treatment")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"my-control"),". It will enroll in the first of the branches, i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"my-treatment"),"."),(0,o.kt)("p",null,"The other branches are available to enroll using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Experiments")," screen available through the app's UI."),(0,o.kt)("p",null,"By default, the app's feature manifest will be downloaded and used to validate each feature configuration. This can be overridden with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-validate")," option."))}p.isMDXComponent=!0}}]);