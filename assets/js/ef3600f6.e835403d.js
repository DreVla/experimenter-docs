(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[9676],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,d=c["".concat(o,".").concat(u)]||c[u]||h[u]||r;return n?i.createElement(d,l(l({ref:t},m),{},{components:n})):i.createElement(d,l({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9530:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return p},default:function(){return h}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),l={id:"client-sdk-states-and-lifecycle",title:"Client SDK States & Lifecycle",slug:"/client-sdk-states-and-lifecycle"},s=void 0,o={unversionedId:"deep-dives/specifications/client-sdk-states-and-lifecycle",id:"deep-dives/specifications/client-sdk-states-and-lifecycle",isDocsHomePage:!1,title:"Client SDK States & Lifecycle",description:"Nimbus SDK Experiment States and Lifecycle",source:"@site/docs/deep-dives/specifications/client-sdk-states-and-lifecycle.mdx",sourceDirName:"deep-dives/specifications",slug:"/client-sdk-states-and-lifecycle",permalink:"/client-sdk-states-and-lifecycle",editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/specifications/client-sdk-states-and-lifecycle.mdx",tags:[],version:"current",frontMatter:{id:"client-sdk-states-and-lifecycle",title:"Client SDK States & Lifecycle",slug:"/client-sdk-states-and-lifecycle"},sidebar:"sidebar",previous:{title:"Rollouts",permalink:"/rollouts"},next:{title:"Proposed changes for Feature Manifest Language",permalink:"/fm-unimplemented-spec"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Key Concepts",id:"key-concepts",children:[]},{value:"Server-Side Experiment States",id:"server-side-experiment-states",children:[]},{value:"Client-Side Experiment States",id:"client-side-experiment-states",children:[{value:"Telemetry",id:"telemetry",children:[]}]},{value:"Client Behaviours",id:"client-behaviours",children:[]},{value:"References",id:"references",children:[]},{value:"Changelog",id:"changelog",children:[]}],m={toc:p};function h(e){var t=e.components,l=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Nimbus SDK Experiment States and Lifecycle"),(0,r.kt)("h6",{id:"authors-ryan-kelly"},"Authors: Ryan Kelly"),(0,r.kt)("h6",{id:"reviewers-kate-hudson-tim-smith"},"Reviewers: Kate Hudson, Tim Smith"),(0,r.kt)("h6",{id:"status-draft-as-of-november-2020-see-the-changelog-for-updates"},"Status: Draft as of November 2020; see the ",(0,r.kt)("a",{parentName:"h6",href:"#changelog"},"changelog")," for updates"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This document provides a high-level overview of the lifecycle of a Nimbus experiment, from the point of view of the client SDK. It's in part an adjunct to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mozilla/experimenter/tree/main/app/experimenter/kinto#experiment-states"},"Nimbus Experiment Publishing Lifecycle"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"#client-behaviors"},"behaviour of API calls")," to the Client SDK will\ndepend on both the last observed ",(0,r.kt)("a",{parentName:"p",href:"#server-side-experiment-states"},"server-side experiment\nstate"),", and the current ",(0,r.kt)("a",{parentName:"p",href:"#client-side-experiment-states"},"local client\nstate"),", and the SDK will ",(0,r.kt)("a",{parentName:"p",href:"#telemetry"},"emit\ntelemetry")," based on the local state of each\nexperiment."),(0,r.kt)("p",null,"I happen to think that these states could map nicely to some Rust Enums, but your mileage may vary."),(0,r.kt)("h2",{id:"key-concepts"},"Key Concepts"),(0,r.kt)("h4",{id:"treatment"},"Treatment"),(0,r.kt)("p",null,'We\'ll use "treatment" to refer to the change in client behaviour that\'s triggered by an experiment. This might be a small change in colour or wording, or may provide some much larger piece of new UX. The details and scope don\'t matter for our purposes here, what matters is having a word that means "the user is experiencing the effects of the experiment".'),(0,r.kt)("h4",{id:"enrollment"},"Enrollment"),(0,r.kt)("p",null,"Enrollment is the process of the client SDK deciding whether this client should be part of the experiment and if so, what branch it should be assigned to. We'll emit an ",(0,r.kt)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/display/FJT/Nimbus+Engineering#NimbusEngineering-ExperimentTelemetry"},"enrollment")," telemetry event when this happens."),(0,r.kt)("p",null,"Once a client is enrolled in an experiment, it will tag its telemetry pings with that experiment and branch information so that they can be identified for analysis."),(0,r.kt)("p",null,"Enrolled clients will remain enrolled and assigned to the same branch until the experiment ends, or until they reset their experiment state by disabling telemetry. A client may ",(0,r.kt)("em",{parentName:"p"},"disable the treatment")," under various circumstances, but it's important that it continue reporting that it was enrolled in the experiment, to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/18Vdn4zZX2D1u9AqzHRY0lUSUbpBdouqWtVp3Bu8vYQA/"},"help with data analysis"),"."),(0,r.kt)("p",null,"Note that it's possible for an experiment to be closed for new enrollments, while continuing to be active for and showing its treatment to previously-enrolled clients."),(0,r.kt)("h4",{id:"exposure"},"Exposure"),(0,r.kt)("p",null,"Exposure is the process of actually showing the treatment. In other words, it's when we change client behaviour based on the experiment branch in which the client was enrolled, or when we ",(0,r.kt)("em",{parentName:"p"},"would")," have changed behaviour if the user was not in the control group. We'll emit an ",(0,r.kt)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/display/FJT/Nimbus+Engineering#NimbusEngineering-ExperimentTelemetry"},"exposure")," telemetry event the first time this happens."),(0,r.kt)("p",null,"Note that it's possible for a client to be enrolled in an experiment but never be exposed to its treatment, for example if the user never uses the part of the client app that is affected by the treatment."),(0,r.kt)("h4",{id:"disqualification"},"Disqualification"),(0,r.kt)("p",null,"After a client is enrolled in an experiment, we may need to disable that experiment's treatment for various reasons, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The user explicitly opts out of the experiment, or of all experiments."),(0,r.kt)("li",{parentName:"ul"},"The application code detects that it cannot show the treatment."),(0,r.kt)("li",{parentName:"ul"},"The targeting parameters change in a way that excludes the client.")),(0,r.kt)("p",null,"We'll emit a telemetry event when this happens."),(0,r.kt)("p",null,"Importantly, if the client was already enrolled in an experiment, then it will continue to tag its telemetry pings with the enrolled experiment and branch information, even if it has become disqualified."),(0,r.kt)("h2",{id:"server-side-experiment-states"},"Server-Side Experiment States"),(0,r.kt)("p",null,"The Nimbus experiment publishing workflow moves each experiment through several different states, reflected in the experiment data published to the Remote Settings server. Transitions between the states are triggered by updates published to Remote Settings. (TODO: maybe also by the passage of time as observed by the RS server?)"),(0,r.kt)("p",null,"Note that we are only interested in states that are observable by the client; the experiment publishing workflow has additional states for internal use that are not represented here."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"drawing",src:n(3282).Z})),(0,r.kt)("h4",{id:"the-preparing-state"},'The "Preparing" State'),(0,r.kt)("p",null,"Before an experiment becomes visible to clients in Remote Settings, it may go through a series of drafts and adjustments and approvals in the Experimenter console. This is represented in the server-side workflow by several different states, but since it is completely invisible to the Client SDK these will not be discussed further in this document."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," state, by being made visible to clients in Remote Settings.")),(0,r.kt)("h4",{id:"the-enrolling-state"},'The "Enrolling" State'),(0,r.kt)("p",null,'This is the first phase of an experiment going "live" and starting to show up in the user experience. It\'s indicated by the experiment being visible to clients in Remote Settings with ',(0,r.kt)("em",{parentName:"p"},"isEnrollmentPaused")," set to ",(0,r.kt)("em",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"Clients that ",(0,r.kt)("em",{parentName:"p"},"observe an experiment transition")," to this state should check whether to enroll in the experiment (N.B. this includes a self-transition from ",(0,r.kt)("strong",{parentName:"p"},"Enrolling")," -> ",(0,r.kt)("strong",{parentName:"p"},"Enrolling")," that is accompanied by a change in the published experiment config, which might change enrollment decisions)."),(0,r.kt)("p",null,"While the experiment is in this state, enrolled clients should activate the experiment treatment appropriate for their enrolled branch, and report telemetry about it."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Running")," state, when a Remote Settings update changes ",(0,r.kt)("em",{parentName:"li"},"isEnrollmentPaused")," to ",(0,r.kt)("em",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," state, when a Remote Settings update changes other experiment parameters."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Ended")," state, if the experiment ceases to be visible in Remote Settings.")),(0,r.kt)("h4",{id:"the-running-state"},'The "Running" State'),(0,r.kt)("p",null,"This is the second phase of an experiment being live and showing up in the user experience. It's indicated by the experiment being visible to clients in Remote Settings with ",(0,r.kt)("em",{parentName:"p"},"isEnrollmentPaused")," set to ",(0,r.kt)("em",{parentName:"p"},"true"),"."),(0,r.kt)("p",null,"While the experiment is in this state, clients that are ",(0,r.kt)("em",{parentName:"p"},"not")," already enrolled in the experiment should not enroll themselves, even if the experiment config changes in a way that would otherwise cause them to enroll. Already-enrolled clients should continue to activate the experiment treatment appropriate for their enrolled branch, and report telemetry about it."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," state, when a Remote Settings update changes ",(0,r.kt)("em",{parentName:"li"},"isEnrollmentPaused")," to ",(0,r.kt)("em",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Running")," state, when a Remote Settings update changes other experiment parameters."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Ended")," state, if the experiment ceases to be visible in Remote Settings.")),(0,r.kt)("h4",{id:"the-ended-state"},'The "Ended" State'),(0,r.kt)("p",null,'An experiment ends when it ceases to be visible to clients in Remote Settings. As with the "Preparing" state, there may be multiple server-side states involved in ending an experiment, but since they are completely invisible to the Client SDK these will not be discussed further in this document.'),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None, this state is terminal.")),(0,r.kt)("p",null,"Errors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TODO: should we log some sort of error if we observe an experiment coming back to life after it was ended?")),(0,r.kt)("h2",{id:"client-side-experiment-states"},"Client-Side Experiment States"),(0,r.kt)("p",null,"Each Nimbus client will also have its own local state for each experiment, based on the observed history of the server-side experiment states that it has read from the Remote Settings server. Transitions between the states are triggered by observing experiment config changes when querying the Remote Settings server, and by the passage of time on the client."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"client-side local states",src:n(812).Z})),(0,r.kt)("h4",{id:"the-unknown-state"},'The "Unknown" State'),(0,r.kt)("p",null,"Before an experiment is published to Remote Settings, obviously the client SDK can't know anything about it. But there may be client code that calls the SDK asking whether to activate treatments for this as-yet-unknown experiment, so it's worth representing this state explicitly."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Enrolled")," state,  by observing the experiment in Remote Settings for the first time, the experiment being in ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," state, and bucketing logic dictating that the client should enroll in a branch of the experiment."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"NotEnrolled")," state, by observing the experiment in Remote Settings for the first time, but deciding not to enroll based on the observed experiment state or local config.")),(0,r.kt)("h4",{id:"the-notenrolled-state"},'The "NotEnrolled" State'),(0,r.kt)("p",null,"In this state, the client has observed the existence of an experiment in Remote Settings and has stored a local copy of the current experiment config, but based on that config has decided not to enroll in the experiment."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Enrolled")," state, when the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," state, and bucketing logic dictates that the client should enroll in a branch of the experiment.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"(N.B. this includes the experiment transitioning ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," -> ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," with an update to the experiment config)"),(0,r.kt)("li",{parentName:"ul"},"(N.B. the bucketing logic may depend on the state of other experiments, in the case of conflicts between multiple experiments)"))),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Errored")," state, encountering some unrecoverable error in the experiment config."),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Discarded")," state, when the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Cancelled")," or ",(0,r.kt)("strong",{parentName:"li"},"Completed"),".")),(0,r.kt)("h4",{id:"the-enrolled-state"},'The "Enrolled" State'),(0,r.kt)("p",null,"In this state, the client has previously observed the experiment in ",(0,r.kt)("strong",{parentName:"p"},"Enrolling")," state and has been bucketed into a branch of the experiment. It persists the selected branch so that it can consistently reference it even if the experiment config changes in future."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Disqualified")," state:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When the user explicitly opts out of participating in this experiment."),(0,r.kt)("li",{parentName:"ul"},"When the user explicitly opts out of participating in experiments in general."),(0,r.kt)("li",{parentName:"ul"},"When application code makes an explicit API call to disable this experiment."),(0,r.kt)("li",{parentName:"ul"},"When the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," or ",(0,r.kt)("strong",{parentName:"li"},"Running")," state, and its targeting expression no longer matches the client.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"(N.B. this includes the experiment transitioning ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," -> ",(0,r.kt)("strong",{parentName:"li"},"Enrolling")," with an update to the experiment config, which can re-trigger bucketing evaluation)"))),(0,r.kt)("li",{parentName:"ul"},"When encountering some unrecoverable error in the experiment config."))),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Cancelled")," or ",(0,r.kt)("strong",{parentName:"li"},"Completed"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"(i.e. When a valid response is received from Remote Settings and the experiment is no longer present in the Remote Settings collection)."))))),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Discarded")," state, when the user entirely disables telemetry in their client.")),(0,r.kt)("h4",{id:"the-disqualified-state"},'The "Disqualified" State'),(0,r.kt)("p",null,"In this state, the client had previously enrolled in the experiment, but some change has occurred that means we can no longer show them to experiment treatment. The client will continue to tag its telemetry pings with enrollment data, but will not activate the treatment."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Cancelled")," or ",(0,r.kt)("strong",{parentName:"li"},"Completed"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"(i.e. When a valid response is received from Remote Settings and the experiment is no longer present in the Remote Settings collection)."))))),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Discarded")," state, when the user entirely disables telemetry in their client.")),(0,r.kt)("p",null,"Note that once a client has been disqualified from an experiment, it is not possible for it to be resume showing the experiment treatment."),(0,r.kt)("h4",{id:"the-wasenrolled-state"},'The "WasEnrolled" State'),(0,r.kt)("p",null,"In this state, the client remembers that it was previously enrolled in an experiment and may report diagnostic telemetry about this fact, but the experiment has ended and its treatments are no longer activated."),(0,r.kt)("p",null,"WasEnrolled experiments are shown in about:studies:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"WasEnrolled shown in about:studies",src:n(4429).Z,title:"WasEnrolled shown in about:studies"})),(0,r.kt)("p",null,"It's also useful for analysis to have a period of observation (say 30 days?) after an experiment ends in which we still tag telemetry pings with the experiment branch info."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Discarded")," state after 31 days have passed since it entered the ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state, according to the client's local clock.")),(0,r.kt)("h4",{id:"the-errored-state"},'The "Errored" State'),(0,r.kt)("p",null,"A special state into which the client transitions if it observed any unexpected behaviour, such as invalid experient config or unexpected experiment-state transitions. In this state the client may log diagnostic telemetry but will not enroll in the experiment nor activate any experiment treatments."),(0,r.kt)("p",null,"It is not possible to escape this state, except by discarding the experiment information."),(0,r.kt)("p",null,"Transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"Discarded")," state, when the experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Cancelled")," or ",(0,r.kt)("strong",{parentName:"li"},"Completed"),".")),(0,r.kt)("h4",{id:"the-discarded-state"},'The "Discarded" State'),(0,r.kt)("p",null,"This isn't really a state, it's just to mark on the diagram the point at which we discard historical data about the experiment from the client's local storage."),(0,r.kt)("p",null,"Once the client reaches this state, it stops tagging its telemetry pings with information about the experiment."),(0,r.kt)("h3",{id:"telemetry"},"Telemetry"),(0,r.kt)("p",null,"Nimbus clients will submit telemetry via ",(0,r.kt)("a",{parentName:"p",href:"https://mozilla.github.io/glean"},"Glean"),". The full set of experiment-related telemetry is defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://mana.mozilla.org/wiki/display/FJT/Nimbus+Engineering#NimbusEngineering-ExperimentTelemetry"},"Nimbus Engineering Mana page"),"."),(0,r.kt)("p",null,"Nimbus will use the ",(0,r.kt)("a",{parentName:"p",href:"https://mozilla.github.io/glean/book/user/experiments-api.html"},"Glean Experiments API")," to tag outgoing metrics pings with information about enrolled experiments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"After initialization, the Nimbus SDK will list all known experiments in ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),", ",(0,r.kt)("strong",{parentName:"li"},"Disqualified "),"or ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state and call ",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentActive(slug, branch)")," to tag outgoing telemetry pings with the enrolled branch of that experiment."),(0,r.kt)("li",{parentName:"ul"},"When an experiment transitions to ",(0,r.kt)("strong",{parentName:"li"},"Enrolled")," state, the Nimbus SDK will call  ",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentActive(slug, branch)")," to tag outgoing telemetry pings with the enrolled branch of the new experiment."),(0,r.kt)("li",{parentName:"ul"},"When an experiment transitions from ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled "),"to ",(0,r.kt)("strong",{parentName:"li"},"Discarded"),", the\nNimbus SDK will call ",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentInactive(slug)")," to cease tagging outgoing\ntelemetry pings with information about the experiment.  Note, that Glean does\nnot cache or persist the experiment API info, so it's important to call\n",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentActive")," on every run, preferably close to startup so that\nit can annotate any custom pings that may be sent out early during app launch.\nThe ",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentInactive")," only needs to be called if we have called\n",(0,r.kt)("inlineCode",{parentName:"li"},"setExperimentActive")," for that experiment in the same app run.")),(0,r.kt)("p",null,"Nimbus will also emit Glean ",(0,r.kt)("a",{parentName:"p",href:"https://mozilla.github.io/glean/book/user/metrics/event.html"},"events")," on key experiment state transitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'An "',(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"enrollment")),'" event, when an experiment enters the ',(0,r.kt)("strong",{parentName:"li"},"Enrolled")," state.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Event field "experiment" records the experiment slug.'),(0,r.kt)("li",{parentName:"ul"},'Event field "branch" records the branch into which the client enrolled.'),(0,r.kt)("li",{parentName:"ul"},'Event field "enrollmentId" contains a randomly-generated identifier for this enrollment.'))),(0,r.kt)("li",{parentName:"ul"},'A "',(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"disqualification")),'" event, when an experiment enters the ',(0,r.kt)("strong",{parentName:"li"},"Disqualified")," state.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Event field "experiment" records the experiment slug.'),(0,r.kt)("li",{parentName:"ul"},'Event field "branch" records the branch into which the client enrolled.'),(0,r.kt)("li",{parentName:"ul"},'Event field "enrollmentId" contains the enrollment id from the corresponding "enrollment" event.'),(0,r.kt)("li",{parentName:"ul"},'Event field "reason" containing the reason for disqualification, as one of the following values:',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'"optout"'),(0,r.kt)("li",{parentName:"ul"},'"targeting"'))))),(0,r.kt)("li",{parentName:"ul"},'An "',(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"unenrollment")),'" event, when an experiment enters the ',(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Event field "experiment" records the experiment slug.'),(0,r.kt)("li",{parentName:"ul"},'Event field "branch" records the branch into which the client enrolled.'),(0,r.kt)("li",{parentName:"ul"},'Event field "enrollmentId" contains the enrollment id from the corresponding "enrollment" event.')))),(0,r.kt)("p",null,"Nimbus will also emit Glean ",(0,r.kt)("a",{parentName:"p",href:"https://mozilla.github.io/glean/book/user/metrics/event.html"},"events")," when the client code calls experiment-related APIs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'An "',(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"exposure")),'" event, when client code calls ',(0,r.kt)("inlineCode",{parentName:"li"},"activateExperiment")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"isFeatureEnabled")," for the first time, and the experiment is in ",(0,r.kt)("strong",{parentName:"li"},"Enrolled")," state.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Event field "experiment" records the experiment slug.'),(0,r.kt)("li",{parentName:"ul"},'Event field "branch" records the branch into which the client enrolled.'),(0,r.kt)("li",{parentName:"ul"},'Event field "enrollmentId" contains a randomly-generated identifier for this enrollment.')))),(0,r.kt)("h2",{id:"client-behaviours"},"Client Behaviours"),(0,r.kt)("h4",{id:"when-asked-if-an-experiment-is-active"},"When asked if an experiment is active"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the current client state and last-seen server state for the named experiment."),(0,r.kt)("li",{parentName:"ul"},"If the client state is ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),", return ",(0,r.kt)("em",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, return ",(0,r.kt)("em",{parentName:"li"},"false"),".")),(0,r.kt)("h4",{id:"when-asked-for-the-current-branch-of-an-experiment"},"When asked for the current branch of an experiment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the current client state and last-seen server state for the named experiment."),(0,r.kt)("li",{parentName:"ul"},"If the client state is ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),", return the enrolled branch and its config."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, return ",(0,r.kt)("em",{parentName:"li"},"None"),".")),(0,r.kt)("h4",{id:"when-asked-for-the-current-config-of-a-feature"},"When asked for the current config of a feature"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the current client state and last-seen server state for all experiments."),(0,r.kt)("li",{parentName:"ul"},"Discard any experiments whose client state is not ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),"."),(0,r.kt)("li",{parentName:"ul"},"For each remaining experiment:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get the branch config for the ",(0,r.kt)("strong",{parentName:"li"},"Enrolled "),"branch."),(0,r.kt)("li",{parentName:"ul"},"If it does not contain config for the named feature, discard the experiment"))),(0,r.kt)("li",{parentName:"ul"},"If more than one experiment remains, TODO this is an error right? report it somehow."),(0,r.kt)("li",{parentName:"ul"},"If exactly one experiment remains, return the feature config from its ",(0,r.kt)("strong",{parentName:"li"},"Enrolled")," branch."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, return ",(0,r.kt)("em",{parentName:"li"},"None"),".")),(0,r.kt)("h4",{id:"when-a-server-update-transitions-an-experiment-to-enrolling"},'When a server update transitions an experiment to "Enrolling"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the current client state for the experiment is ",(0,r.kt)("strong",{parentName:"li"},"Unknown")," or ",(0,r.kt)("strong",{parentName:"li"},"NotEnrolled"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get the current state for all known experiments that conflict with this one."),(0,r.kt)("li",{parentName:"ul"},"Evaluate targeting/bucketing/etc, if it says to enroll, set client state to ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TODO: trigger a notification in the client app somehow, to redraw UI etc?"))),(0,r.kt)("li",{parentName:"ul"},"Otherwise, set client state to ",(0,r.kt)("strong",{parentName:"li"},"NotEnrolled"),"."))),(0,r.kt)("li",{parentName:"ul"},"If the current client state for the experiment is ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TODO: what exactly? How does an existing enrollment change in response to updated experiment config?"))),(0,r.kt)("li",{parentName:"ul"},"Otherwise, set the current client state for the experiment to ",(0,r.kt)("strong",{parentName:"li"},"Errored")," and log some diagnostic telemetry.")),(0,r.kt)("h4",{id:"when-a-server-update-transitions-an-experiment-to-paused-or-running"},'When a server update transitions an experiment to "Paused" or "Running"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the current client state for the experiment is ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TODO: trigger a notification in the client app somehow, to redraw UI etc?")))),(0,r.kt)("h4",{id:"when-a-server-update-transitions-an-experiment-to-cancelled-or-completed"},'When a server update transitions an experiment to "Cancelled" or "Completed"'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the current client state for the experiment is ",(0,r.kt)("strong",{parentName:"li"},"Enrolled"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"TODO: trigger a notification in the client app somehow, to redraw UI etc?"),(0,r.kt)("li",{parentName:"ul"},"Set client state to ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled"),"."))),(0,r.kt)("li",{parentName:"ul"},"Otherwise, discard the experiment state.")),(0,r.kt)("h4",{id:"during-some-periodic-cleanup-process"},"During some periodic cleanup process"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For each experiment in the ",(0,r.kt)("strong",{parentName:"li"},"WasEnrolled")," state:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If it has been more than N days since we entered that state, discard the experiment state.")))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.google.com/document/d/1RD-Ok9jYpa4cyyCAe-SO4xjITKN1ueh37WmN65u5BM4"},"Nimbus - Experiment Publishing Lifecycle and Permissions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.google.com/document/d/18Vdn4zZX2D1u9AqzHRY0lUSUbpBdouqWtVp3Bu8vYQA/"},"Unpacking Unenrollments"),", an explainer for data analysis needs around unenrolling/disabling experiments")),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("h4",{id:"2021-04-13-dmose"},"2021-04-13 (dmose):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Moved from ",(0,r.kt)("a",{parentName:"li",href:"https://docs.google.com/document/d/18L3oNriwwLd5TZrM1SaHIfIJXmXqUkwNwQEPwVOTY6Q/edit#"},"Google Doc"),", converted to MDX format, and commited to DocsHub.")),(0,r.kt)("h4",{id:"2020-11-18-rfkelly"},"2020-11-18 (rfkelly):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Renamed "activation" to "exposure" in line with terminology discussion from Nimbus Architecture Group meeting.')),(0,r.kt)("h4",{id:"2020-11-13-rfkelly"},"2020-11-13 (rfkelly):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Renamed "disabled"  state to "disqualified"')),(0,r.kt)("h4",{id:"2020-11-11-rfkelly"},"2020-11-11 (rfkelly):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Added the "disabled" state to client states.'),(0,r.kt)("li",{parentName:"ul"},'Added the "telemetry" section.')),(0,r.kt)("h4",{id:"2020-10-30-rfkelly"},"2020-10-30 (rfkelly):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Added the key concept of "disablement" as distinct from unenrollment.'),(0,r.kt)("li",{parentName:"ul"},"Simplified server states by:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'combining "drafting + pending" into "preparing".',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'also removed hypothetical logic around handling of "startDate" in order to start a pending experiment; it starts when visible in Remote Settings.'))),(0,r.kt)("li",{parentName:"ul"},'combining "completed  + cancelled" into "ended".'),(0,r.kt)("li",{parentName:"ul"},'removed "paused" since it doesn\'t sound like we have such a state that\'s distinct from "running".')))))}h.isMDXComponent=!0},4429:function(e,t,n){"use strict";t.Z=n.p+"assets/images/WasEnrolled-in-about-studies-9d33603f715b1d7279c8c300adba3372.png"},812:function(e,t,n){"use strict";t.Z=n.p+"assets/images/client-side-local-states-481dec490572f78332b3701cafb17f60.png"},3282:function(e,t,n){"use strict";t.Z=n.p+"assets/images/client-visible-publishing-workflow-states-c491801bfadd8f5a598a6b23cd91aada.png"}}]);